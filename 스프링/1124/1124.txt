밑 순서대로 답변해야함
1. [ web    s   >>>  c ]

2. Spring - mvc 모델 구현, DI 구조                   ~ 스프링프레임워크 : 개발자가 Controller에게 지시
c  >>>>request>>>> s >>>처리>>>> c

* JVM 구조 : heap영역에 객체 저장 ~ heap영역도 메모리 사용하는 것이기 때문에 GC가 청소함( 메모리 사용 多 GC도 자원낭비하는 것)
* 객체 관리 : 객체 생성 > 사용 > 소멸까지 해야함  ~  java는 GC가 소멸역할을 해줌   ~ c언어는 개발자가 소멸역할 해줘야함
* DI의 의존 관계 : 컴파일하면서 > 객체생성(객체의 의존 관계) > bean에 만들어 > 컨테이너에 저장하겠다.   ~  설정파일이 컨테이너에 저장됨  ~  s가 붙어있는 파일은 컨테이너에 보관O
   ** 어노테이션을 붙여서 객체 만들어달라고 한다.
   ** 의존 관계에서만 되는 것만은 아님
* 객체 조립 > 메모리 사용에 Good
* <context : component-scan base-package="com.human.cafe"/> :  패키지 스캔하면서 객체 만들어라  ~ 패키지 여러개 지정 가능   ~ 파일에 S 붙어야 객체 생성될 수 있는 환경
*  spring에서는 기본적으로 싱글톤으로 지원하고,  설정을 통해서 바꿀 수는 있음  ~ servlet-context.xml
*  컨테이너로부터 객체 주세요 ~ 객체 새로 만들기 x

DI : 객체가 필요할 때, new연산자로 직접 객체를 생성한다는 것이 아닌 스프링 컨테이너에 있는 객체의 주소를 주입받는다.     ~ 특징 : 의존성주입( 컨테이너로부터 달라고 한다 )

컨데이너의 객체를 등록하는 법 )
 - 스프링의 설정 파일로 객체를 생성하고 컨테이너에 등록시킨다.
 - 스프링 설정 파일은 xml파일로도 할 수가 있고 java파일로도 할 수 있다.
 - 컴파일하면서 xml에 설정된 순서대로 객체를 만든다. > 자신의 컨테이너 영역에 보관한다.

3. request 
   1. 컨트롤러호출
   2. 파라미터 : get, post, json

4. server
   1. 파라미터받기  ~  고려 : 클라이언트에게 보낼 방식
   2. 처리    ~   session 이라는 것을 처리한다.    ~ session 이해 ) 서버에 실제로 들어오지 않아도 인정해주는 것 
						          서버에 (클라이언트) 기록 남김 > 기록있으니 인정(로그인)
						          물리적은 연결X  논리적으로는 연결O 
						          ex )  돌잔치 - 입장스티커 - 식당 - 화장실 - 식당   

       - DB
       - Login      

      * session 구조는 바꿀 수 없음 ( web  s  >>>> c  )   ~  네트워크 구조
      * session  &  cookie      ~    ex ) 로그인    -   아이디, 비번 session    //   쿠폰도장같은 부가적인 요소 cookie

   3. view

@RequestMapping(value="/",     ~     / <-  클라이언트 요청 값

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

* 협업을 생각하고 코드를 짜라 ~ 스프링은 대규모 프로젝트

A. 컨트롤러가 DAO 요청    	     ~ 이 구조도 가능
B. 컨트롤러    서비스단    dao    ~ 이 구조로 작성함  ~  장점

ex ) 컨셉 : 개인이 작성한 글은 댓글을 작성할 수 있다.
	 글 자세히 보기 > 필요한 디비작업  (1. 해당글 튜플 가져오기 2. 해당 글의 댓글 리스트로 가져오기 )

     A ) 컨트롤러가 2개의 작업을 요구한다... 만약, 요구한 작업이 많아질 수록 컨트롤러는 해야 할 것이 많아진다.
          파라미터도 받아야하고, 디비 작업도 시켜야하고, 뷰도 지정해야 하고, 세션도 관리하고,   힘들다 ㅠ

     B )  컨트롤러가 서브단에게 한 개만 요청한다.   23번 글 자세히 볼거다
          서비스단이 알아서 2개의 디비 작업을 실시한다.
          컨트롤러는 디비 작업에서 자유로워지고 서비스가 실시한 결과만 받으면 된다.

--------------------각 layer별 개발 기술 -----------------------------------------------------     
     서비스단도 개발자가 맘대로 구현해도 되나
     스프링에서는 인터페이스로 구현하도록 한다. 그리고 관련 객체도 스프링에서 관리한다.

     dao Layer은 mybatis 개발한다.
     mybatis에서는 인터페이스로 dao를 작성하도록 한다.

정리 ) 인터페이스 설명하라고 한다.   ~ tip)
        키워드 : 추상클래스, static(공용)-싱글콘, final(상수)-값변경불가능 정의하고 다른 클래스에서 구현받아서 사용한다.
        구현받은 클래스는 인터페이스의 추상클래스를 반드시 오버라이드 한다.
        인터페이스 자료형의 변수는 구현받은 모든 클래스의 객체의 주소값을 가진다.(다형성)   ~  의존성 낮춘다
        인터페이스 변수로 구현받은 객체의 메서드에 접근이 가능하다.
        객체가 다르고 그 기능도 다르지만 메서드 하나로 서로 다른 기능을 실행시킬 수 있다.

-- 서비스 Layer --
interface inf_a
      view();

p c b imp inf_a{
     @override
     view(){
	//1. 객체 가져오기
	//2. 댓글 가져오기
     }
}

-- 컨트롤러 Layer --
디비 작업이 필요하다.  ~  inf_a dbbad = // b 클래스 객체의 주소값을 컨테이너에서 가져온다.
				      사전 작업은 b클래스 객체를 컨테이너에 등록해야 한다.


갑자기 사용자 정보도 가져오도록 업그레이드하세요. ~ 현재 저 서비스는 실행중   ~  실행 중 개발 할 수 있나?
이 서비스는 12월 25일부터 시행하겠다.
지금 시스템은 버전 1.0으로 25일부터는 2.0으로 하겠다.
지금 시스템 소스는 그대로 두고 따로 개발라인으로 개발하고 개발이 완료되면 테스트를 거쳐 적용
개발하는 소스가 최대한 기존의 소스를 거들지 않았으면 좋겠다.   ~ 컨트롤러를 건들지 않는게 좋겠다.  >> 그래서 서비스단은 인터페이스를 사용하는 것


p c b_ver2 imp inf_a{                                                        > 이렇게 한 후 b클래스를 지우고 다시 스프링을 구동하면
     @override                                                                   자연스럽게 스프링에서는 인터페이스를 구현받은 객체로 만들어준다.
     view(){              					 여기서 기억해야 할 것은 자바에서는 인터페이스를 여러 개의 클래스가 구현할 수 있지만
	//1. 객체 가져오기                                                   스프링에서는 인터페이스당 한개의 클래스만 구현받을 수 있다.
	//2. 댓글 가져오기
	//3. 사용자 정보 가져오기
     }
}

      
<bean> : 스프링구동될 때, 이런 파일 객체 만들어주세요  ~ bean은 객체

의존 관계 형성 
변수명 바꿀 수 없음  자료형 (클래스)  id의 변수명은 바꿀 수 있음
클래스 멤버 변수 이름은 못바꿈
벨류값은 바꿀 수 있음
ref : 리퍼런스

@Service :  서비스를 제공할 객체이다   ~ 이것이 있어야 컨테이너에 등록됨   ~ 구현은 xml에서 함

컨트롤러 Layer   서비스 Layer    dao Layer

<dependencies>  ~ 의존성 관련하여 라이브러리 관리



---------------------------------------------------------------------------------
데이터 의존 관계 먼저 파악
[root]
	<!-- 오라클 bean -->  
	<bean
		class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		id="dataSource">
		<property value="oracle.jdbc.driver.OracleDriver"
			name="driverClassName" />
		<property value="jdbc:oracle:thin:@localhost:1521:orcl"
			name="url" />
		<!-- 오라클 사용자 이름 -->
		<property value="system" name="username" />
		<!-- 오라클 사용자 비밀번호 -->
		<property value="1111" name="password" />
	</bean>

	<!-- mybatis 사용하기 위한 객체를 설정 이것은 스프링이 구동되면서 객체를 만들어서 컨테이너에 등록시킬 것이다. -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactory">  //sql쿼리문,xml 등을 지원함
		<property name="dataSource" ref="dataSource" />
		<property value="classpath:/mapper/*Mapper.xml"
			name="mapperLocations" />               <!-- 메퍼지정 -->
	</bean>

	<!-- 지금 설정하는 bean(객체)을 dao가 주소를 주입받아서 mybatis의 작업을 요청할 것이다.  -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
      <constructor-arg index="0" ref="sqlSessionFactory" />
      <context:component-scan base-package="com.human.dao"></context:component-scan>
	<!-- 지정된 패키지의 클래스를 파일을 스캔하여 객체로 만들어라
		 현재 여기에는 @Repository로 설정되어 dao 역할을 하는 클래스가 정의되어 있음.
	 -->
   </bean>
	
*Mapper.xml  : *앞에 이름 상관없음   nnnMapper 이렇게 하면 알아서 인지해줌   Mapper라는 단어로 끝나는 파일


Mapping                  view
   /                       home.jsp    	        -  메인페이지, 글쓰기(기능)
wrForm                  wrForm.jsp   	        -   글쓰기 화면
wrAction                home.jsp(테스트용)      -   디비에 글 저장 



c <->   s    <->  DAO단  			<-> 	My         	           	     <->       DB
	         1. 인터페이스로 작성하고		sqlsession
	         2. 매핑				->sqlsessioninf ~ Mapper	       q
						   ->datasource		      <->
									        r










