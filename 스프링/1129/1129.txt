Spring : 프레임워크의 정의, version    //  기능이 많다. 버전별 지원하는 기능이 차이가 있다.
 >> 현업은 많은 기능을 경험한 사람을 좋아한다.    ~ 절대적 X
      기능이 많기 때문에 프로젝트 마다 반드시 사용하는 기능을 중점으로 타겟을 잡는다
      : DI, 컨테이너, 컨트롤러, ( 컨트롤러 <> 서비스 <> DAO Layers ), MVC2 패턴           ~ 퍼포먼스 중심적인 것 말고
       + 인터셉터 + 추가적인 기능 구현(페이징, 파일첨부)
       >> 이런 습관과 능력이 회사에서 요구하는 80%이상이다.

       클라이언트의 요청  >  컨트롤러(파라미터받기 + 데이터베이스작업요청, view선택, 세션처리 )  > View선택(데이터전달 ) > forward or redirect

       ** 세션기능을 인터셉터에서 적용하여 로그인하는 기능 구현

       로그인 시 1 ) 세션에 등록여부판단  2 ) 세션에 로그인 정보를 저장
       >> 이것을 컨트롤러에서 할 것인가? 이렇게 하면 어떤 불편한 점이 있을까?  이것을 1분정도 생각
	권한이 있는 기능을 구현 글쓰기는 로그인 한 사람만, 글보기는 아무나, 글자세히보기도 로그인한 사람만
 	불편한 점 : 서비스를 먼저 처리해준다고 하고, 세션 등록 여부 판단을 매번해주어야 한다. <코드중복>
	> 개선한다면 컨트롤러에 서비스를 처리해 주기 전에 로그인 검사를 한 후 컨트롤러가 서비스를 처리해준다.
	   인터셉터는 컨트롤러에 처리하기 전이나 후에 동작하는 것. 대부분 컨트롤러 처리전에 많이 사용

       이전 )
	클라이언트의 요청  >  컨트롤러(파라미터받기 + 데이터베이스작업요청, view선택, 세션처리 )  > View선택(데이터전달 ) > forward or redirect

       이후 )
	클라이언트의 요청  > 인터셉터 > 컨트롤러(파라미터받기 + 데이터베이스작업요청, view선택, 세션처리 )  > View선택(데이터전달 ) > forward or redirect


       세션 : 웹서버가 갖고 있는 저장 공간, 클라이언트의 정보를 저장한다.     ~ 보안성이 더 좋음(쿠키보다)
	   이 저장공간을 활용하여 로그인 같은 기능을 구현할 수 있다.   ~ 주의* 세션 = 로그인이 아니다.
	   세션은 웹서버가 만들고 보관도 웹서버가 한다.
       쿠키 : 세션과 비슷하지만 가장 큰 차이는 쿠키는 웹서버가 만들고 클라이언트가 보관한다.    ~  세션저장공간차지크다, 탈취가능한 정보는 쿠키가 관리
	    >> 웹서비스는 요청 > 처리(쿠키ID값과 세션에 저장된 쿠키ID값을 비교해서 이전 사용자인지 판별, 만약 서버에 쿠키 아이디가 없다면 서버는 쿠키를 만들어서
		                    클라이언트에게 보내고, 서버에 쿠키아이디가 있다면 접속시간 같은 정보를 갱신하여 클라이언트에게 전송한다.)
	    => 쿠키는 웹브라우저에서 저장하고 있다. ( stateful   VS   stateless )
		* stateful : 세션이 종료될 때( 더이상 클라이언트가 서비스를 이용하지 않는다. 로그아웃같은 경우 )까지 클라이언트의 정보를 저장하고 있다.(like 쿠키값)
			  ~ 인터넷에 기록 저장하기 위한 것
			  첫번째 접속하면 서버가 쿠키를 만들어서 클라이언트에게 주고 후속되는 연결 시에는 쿠키값을 갖고 서버로 온다.
		  stateless : 요청에 대한 응답만 한다. 선행되는 작업이 후속으로 따라오는 작업과 전혀 연관성이 없다.
			   REST API - 클라이언트 요청에 의미를 부여한 것   ~ GET으로 보내면 조회, POST로 보내면 insert로 본다 ( 미리 정의해둠 )
				   - 화면을 분할시켜서 동작시킬 수 있다.(비동기식 방식을 사용하면 가능)
				     REST  API 비동기식을 많이 응용해서 개발한다.

		* 캐시 : 속도 빨리하기 위한 하나의 공간

       <추가> - 스프링 시큐리티 (난이도 *****) : 보안적인 이슈를 제공하는 기능
	     - 다양한 API 사용(다른 프로젝트에서 사용할 수 있도록 인터페이스를 제공)           * Application Programming Interface
			   (쉽게 말해 함수를 이용해서 다른 프로젝트에서 제공되는 서비스를 사용)
	        ex ) 네이버 로그인 기능 가져다가 구현하기 (JSON : 객체, 더 쉽게 말하면 하나의 변수로 여러개의 변수를 표현)
 		 위치 가져와서 지도에 표현하기
                 - AOP : 관점지향 프로그래밍 ( 주로직, 보조로직, 미리 규칙을 만든다. )
		   주로직이 특정 시점에서 실행될 때, 보조로직이 동작하도록 미리 설정
		   주로직은 자기일에 집중할 수 있다. 부수적인 작업을 할 필요없다. )

Spring > Spring boot ( 프로젝트 후 유튜브를 보면 좋겠다 ) > node.js
** 추가적으로 react도 보았으면 좋겠다. ( 비동기랑 밀접한 관계를 갖고 있다. 의미적으로 이해 )
** 프로젝트를 만들어서 ppt 없어도 되지만 질문이 들어 올 수도 있다.    ~ 어떤 것인지를 알고 있어라


Maven : 프로젝트 관리, 라이브러리 관리 방법, 디렉토리 구조 이해
Mybatis : version, 정의(프레임워크), dao와 쿼리를 매핑하는 구조, sqlsession, sessionFactory, Datasource
Tomcat : 웹서버와 WAS 차이 아는지   ~ 웹서버 : 서버가 갖고 있는 데이터로 응답해주는 구조
				   WAS  : 서버가 다른 시스템(데이터베이스)에 데이터를 요청하고 이를 응답받아서 처리해주는 구조
Java     : version, 버전에 따라 제공하는 문법이 있다.  ~ 8버전으로 가장 많이 개발    > 제네릭!!
Oracle  : version, 관계형 데이터베이스, sqldeveloper(DB가 아니다. 응용 SW),
	오라클의 특징, 
	DDL(create, drop, alter), : table, view, index, 기본키, 외래키 관리
	DML(CRUD), : 테이블 조작(select 절의 구조, 조인, 서브쿼리, 함수, 트리거, 프로시저)
	DCL(commit, rollback, checkpoint) > 트랜잭션을 보장하기 위한 것(계정관리)      * 트랜잭션 : 한가지 일을 하고 있을 때, 이 일이 온전하게 마무리 되는 것을 보장
		+ DCL은 계정생성, 권한부여(grant), 권한회수(revoke)도 있다.	       ex ) 은행에서 돈을 출금할 때, 갑자기 정전 일어남 > 돈 못받음 
				-> 테이블 같은 것에 권한 부여			>> 이럴 땐 rollback이다.   (commit이냐 rollback이냐)








root 컨트롤러 단
servlet 컨트롤러 전체  ~ 여기서 인터셉터 설정해줌


porn.xml 바꿔줌   >> 인터셉터   ~   업데이트 해주어야함
<properties>
		<java-version>1.8</java-version>
		<org.springframework-version>4.3.22.RELEASE</org.springframework-version>
		<org.aspectj-version>1.8.9</org.aspectj-version>
		<org.slf4j-version>1.6.6</org.slf4j-version>
	</properties>




-------------------------------------------------------------------------------------------------------------------
[ 페이징 ]

select * from bb order by num desc;  ~ 최신글부터 조회가 된다
페이지에 10개의 게시글이 보여진다면
첫번째 페이지는 1번부터 10번까지
두번째 페이지는 11번부터 20번까지 글이 보여줘야한다.

11번부터 20번까지 튜플을 가져오는 쿼리문을 작성하시오.
select t.* from (select sub.*, rownum as rnum from (select * from bb order by num desc) sub) t
where rnum between 1 and 10;

t테이블에 적용될 where

서브쿼리 정의 : 본쿼리안에 쿼리   ~ how ? 서브쿼리 결과를 본 쿼리에 적용시켜라

스프링에서 필요한 튜플의 수만 가져오기 위해서는 시작번호와 끝번호만 알면 된다.   << 프로그래밍















































