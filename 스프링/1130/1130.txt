인터셉터 + 세션 : 로그인기능 + 게시판기능에 권한을 부여    	< 스프링의 아키텍쳐 >
pageVO를 이용하여 page 기능 구현   				< pageVO 알고리즘 이해, Client > 
						      			        Controller > Service > DAO >
						       			        View > 에 활용하는 능력 >
첨부파일 기능을 구현 - Multipart 				<아키텍쳐, 자바IO >
							* 아키텍쳐는 컴퓨터나 시스템이 구동하는 방식을 이해한다. JVM구조, cpu<>캐시<>주기억<>보조기억

컴퓨터는 이진수 : 그림도, 파일도, 내부적으로는 모두 다 이진수... 문자는 아스키코드값, charset=utf-8 < 2진수를 문자로 표현할 때, 기준이 되는 코드표 >

[ 구조를 이해 ]
클라이언트의 파일을 서버로 옮기는 것    < 같은 컴퓨터에 있기 때문에 좀 헷갈릴 수 있다.   ~  클라이언트와 서버는 tcp/ip 네트워크로 통신하고 있다. > 
1. 클라이언트의 역할 : 서버로 파일을 전송
2. 서버의 역할 : 클라이언트가 보낸 첨부파일을 임시공간에 저장한다 > 이것을 첨부파일 위치에 이동 (자바 IO기술)
	        첨부파일의 정보를 저장 ( 데이터베이스에는 첨부파일이 아닌 파일명의 정보가 저장, 실제 파일을 별도의 폴더에 저장한다. )

[ 코드를 작성 설계 ]
1. 가 vs 나 중에 고민 
   가 ) 테이블에 첨부파일을 저장하기 위한 속성을 추가할 것인가?    - 특징 : 설계 단순, 첨부파일의 수가 정해져 있다, 유연성은 떨어짐    
   나 ) 별도의 첨부파일 테이블을 만들어야 할까?                         - 특징 : 설계 복잡, 유연성이 좋아짐    ~ 실습컨셉은 이것으로 

나 ) 실습은 첨부파일 1개를 올리는 컨셉으로 진행한다. 
첨부파일 테이블 ) 
create table board_attach(
num number,       		 // 글번호
fname varchar2(20),            // 파일이름
indate timestamp default sysdate);

보드 테이블 )
create table board ( // 난 bb라고 함
num number primary key,
name varchar2(10),
email varchar2(10),
title varchar2(100),
content varchar2(300),
pass varchar2(8),
cnt number default 0,
indate timestamp default sysdate);


현재 게시글 쓰는 mapper sql
insert into bb values (bb_cnt.nextval,#{name},#{email},#{title},#{content},#{pass},default,default)  - ( 가 )
bb_cnt.nextval  글 번호를 의미하는 것인데 만약 첨부파일이 있다면 ( 가 )에서 글번호를 가져와야한다.   방법이 없다.

insert into bb values (bb_cnt.nextval,#{name},#{email},#{title},#{content},#{pass},default,default)
insert into board_attach values (글번호, 파일이름, 날짜 );
* bb_cnt.nextval = 글번호   // 일치해야 board_attack 게시글이 몇번 글의 첨부파일인지 알 수 있다.

=> < 수정 1 >  서비스단에서 먼저 글번호를 가져온다. 가져온 글번호로 글등록과 첨부파일 등록을 진행한다.
int nowCnt     <<  select bb_nextval from dual;
insert into bb values (nowCnt,#{name},#{email},#{title},#{content},#{pass},default,default)   글등록
insert into board_attach values (nowCnt, 파일이름, 날짜 );                                        첨부파일등록

=> < 수정 2 >  서비스단에서 먼저 글을 등록한다. 이 때, 글번호는 가져오지 않고 
	        첨부파일을 등록할 때 쿼리문에서 서브 쿼리로 이전 테이블의 글번호 중 가장 큰 번호를 가져온다.
	        * 글을 등록할 후에 첨부파일을 바로 등록한다면 그 첨부파일은 글번호 가장 큰 사람의 것이다.    ~  보장
select max(num) from bb;
insert into board_attach values ((select max(num) from board),'text',dafault);


=> < 수정 3 > 기존의 서비스와 dao를 유지한다. 
	       기존의 서비스와 dao를 유지하고 mapper 동작에서 첨부를 알 수 있다. 그래서 mapper 2개의 쿼리를 실행시킨다.
  	       <mapper> 에서 
insert into bb values (bb_cnt.nextval,#{name},#{email},#{title},#{content},#{pass},default,default)
insert into board_attach values ((select max(num) from board),'text',dafault);

* 수정 1, 수정 2, 수정 3 이던 boardVO에서는 첨부파일의 정보를 저장할 변수가 존재한다 (필수)

>> 수정 2 선택  ~ why?   dao 와 mapper랑 매핑할 때, dao가 넘겨줘야 할 매개변수는 1개만 가능하다.
		        insert into bb values (nowCnt,#{name},#{email},#{title},#{content},#{pass},default,default)   - 매개변수 vo 넘긴다. 1개
		        insert into board_attach values (nowCnt, 파일이름, 날짜 );  - 변수 2개를 넘겨야 한다. 별도의 vo를 만들어야 한다.
									> 이 vo를 많이 활용하지 않을 것이다.
									 > 이럴 때는 변수 2개를 map으로 묶어서 파라미터로 보내준다.




* 스프링은 프레임워크 : 지정된 틀이 존재   ~ 설정이 반이다.
   ~~  우리가 했던 기능을 중심으로 프로젝트하기    >> 내가 갖고 있는 기술로 작품 하나 만들기   >> 이 경험을 기반으로 나아가라


2. 클라이언트가 서버에게 파일을 보낸다.
   서버는 어떻게 할 것인가?
   서버는 임시파일을 지정된 위치로 복사를 한다.   java   IO     << 사용법 써먹는다.  


< 실습은 첨부파일 여러개를 올릴 수 있도록 파일은 배열로 작성을 한다.   ~  실제 코드는 파일 하나를 전송한다. > 

1. 디펜던시 관리 ( maven 설정 )    ~  pom.xml > library 설치       
<!-- 파일업로드 라이브러리 -->
      <dependency>
         <groupId>commons-fileupload</groupId>
         <artifactId>commons-fileupload</artifactId>
         <version>1.3.1</version>
      </dependency>

2. 스프링 설정  ~ servlet
<beans:bean class="org.springframework.web.multipart.commons.CommonsMultipartResolver" id="multipartResolver">
		<beans:property name="maxUploadSize" value="10485760"></beans:property> <!-- 첨부파일용량제어 ~ 10메가 제한 설정 -->
	</beans:bean>
	<!-- 서버에 올라온 임시공간에 첨부파일의 위치를 선언함   String uploadPath="/tmp" 랑 같은 의미
		 자바코드에서 선언해도 되는데 스프링은 컨테이너에서 객체를 가져온다. 즉, 스프링에서 객체는 컨테이너에 있다는 것이 일반적인 생각
		 그래서 전체 코드에서 알고 있어야 하는 설정은 여기서 하는 것이 좋다.
	 -->
	<beans:bean class="java.lang.String" id="uploadPath">
		<beans:constructor-arg value="/tmp"></beans:constructor-arg> <!-- 운용되는 서버 -->
		<!-- <beans:constructor-arg value="c:\\tmp"></beans:constructor-arg> 로컬드라이버 -->
	</beans:bean>

3. 클라이언트 작업    - wrForm.jsp
 <form name="frm" method="POST" action="wrAction" encType="multipart/form-data">     <!-- encType을 적어줘야만 첨부파일이 서버로 전송된다-->
	<tr>
               <th>첨부파일</th>
               <td><input type="file" name="file"></td>    <!-- 파일 한개만 올리는 샘플 -->   <!-- 늘리고 싶으면 input++ -->
	</tr>


4. boardVO 수정   private String[] files;  // 클라이언트로부터 받은 파일을 바로 저장하는 것이 아니라 컨트롤러가 작업해서 셋팅할 것이다.

5. 컨트롤러 수정
public String WrAction(Locale locale, Model model, BoardVO bvo, MultipartFile file) throws Exception {

6. 테스트 : 클라이언트의 첨부 파일이 서버로 전송되는 여부
System.out.println(file.getOriginalFilename() + "---첨부파일 디버깅");


--------------------------------------------------------------------------------------------------------------
첨부파일 업로드 흐름 순서
1. 클라이언트
2. 컨트롤러는
   클라이언트에게 받은 첨부파일을 지정한 폴더에 복사
   지정한 폴더에 복사한 파일명을 boardVO files에 저장 > 그리고 DB 작업



select fname from board_attach where num=146;


